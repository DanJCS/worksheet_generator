# main.py
import os
import sys
import io
from openai import OpenAI
import random

# --- Configuration ---
# The script expects the OpenRouter API key to be set as an environment variable.
# Example for Linux/macOS: export OPENROUTER_API_KEY="your-key-here"
# Example for Windows (Command Prompt): set OPENROUTER_API_KEY="your-key-here"
# Example for Windows (PowerShell): $env:OPENROUTER_API_KEY="your-key-here"
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_API_BASE = "https://openrouter.ai/api/v1"
# You can specify any model available on OpenRouter, e.g., "google/gemini-pro"
MODEL_NAME = "google/gemini-2.5-pro"


def get_code_from_gemini(client: OpenAI) -> str:
    """
    Makes an API call to a Gemini model via OpenRouter to get a Python script.

    Args:
        client: An initialized OpenAI client configured for OpenRouter.

    Returns:
        A string containing the Python code generated by the model.
        Returns an empty string if the API call fails or no code is found.
    """
    print(f"Asking {MODEL_NAME} to write a 'Hello, World!' program...")
    try:
        completion = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {
                    "role": "system",
                    "content": "You are an expert Python programmer. Your task is to provide only a single, clean, executable Python code block in your response, without any extra explanation or markdown formatting.",
                },
                {
                    "role": "user",
                    "content": "Write a simple Python script which is a fun variation of the Hello World program"
                },
            ],
            temperature=0.1,  # Lower temperature for more deterministic code generation
        )

        # Extract the code from the response
        response_content = completion.choices[0].message.content

        # Clean up the response to get just the code
        # This handles cases where the model might still include markdown backticks
        if response_content.strip().startswith("```python"):
            code = response_content.split("```python")[1].split("```")[0].strip()
        else:
            code = response_content.strip()

        print("✅ Code received successfully.")
        return code

    except Exception as e:
        print(f"❌ An error occurred while calling the API: {e}")
        return ""


def execute_and_capture_output(code: str):
    """
    Executes a string of Python code and captures its standard output.

    Args:
        code: The Python code to execute as a string.
    """
    if not code:
        print("No code to execute.")
        return

    print("\n--- Executing Generated Code ---")

    # Create a string buffer to capture stdout
    old_stdout = sys.stdout
    redirected_output = io.StringIO()
    sys.stdout = redirected_output

    try:
        # Execute the code
        exec(code)
    except Exception as e:
        # If an error occurs during execution, print it to the original stdout
        sys.stdout = old_stdout
        print(f"❌ An error occurred during code execution: {e}")
        return
    finally:
        # Restore the original stdout
        sys.stdout = old_stdout

    # Get the output from the buffer
    output = redirected_output.getvalue()

    print("--- Captured Output ---")
    if output:
        print(output.strip())
    else:
        print("(No output was printed to the console by the script.)")
    print("----------------------")


def main():
    """
    Main function to orchestrate getting, executing, and printing code.
    """
    print("--- Gemini Code Executor via OpenRouter ---")

    if not OPENROUTER_API_KEY:
        print("❌ Error: The 'OPENROUTER_API_KEY' environment variable is not set.")
        print("Please set the environment variable and run the script again.")
        return

    # Initialize the client, pointing to OpenRouter's API endpoint
    client = OpenAI(
        base_url=OPENROUTER_API_BASE,
        api_key=OPENROUTER_API_KEY,
    )

    # 1. Get the code from the LLM
    generated_code = get_code_from_gemini(client)

    if generated_code:
        print("\n--- Generated Code ---")
        print(generated_code)
        print("----------------------")

        # 2. Execute the code and capture its output
        execute_and_capture_output(generated_code)


if __name__ == "__main__":
    main()
