# main.py
import os
import sys
import subprocess
import tempfile
from openai import OpenAI

# --- Configuration ---
# The script expects the OpenRouter API key to be set as an environment variable.
# Example for Linux/macOS: export OPENROUTER_API_KEY="your-key-here"
# Example for Windows (Command Prompt): set OPENROUTER_API_KEY="your-key-here"
# Example for Windows (PowerShell): $env:OPENROUTER_API_KEY="your-key-here"
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_API_BASE = "https://openrouter.ai/api/v1"
# You can specify any model available on OpenRouter, e.g., "google/gemini-pro"
MODEL_NAME = "google/gemini-2.5-pro"


def get_code_from_gemini(client: OpenAI) -> str:
    """
    Makes an API call to a Gemini model via OpenRouter to get a Python script.

    Args:
        client: An initialized OpenAI client configured for OpenRouter.

    Returns:
        A string containing the Python code generated by the model.
        Returns an empty string if the API call fails or no code is found.
    """
    print(f"Asking {MODEL_NAME} to write a Python script to generate plots for a GED Science test...")
    try:
        completion = client.chat.completions.create(
            model=MODEL_NAME,
            messages=[
                {
                    "role": "system",
                    "content": "You are an expert Python programmer specializing in data visualization with matplotlib. Your task is to provide only a single, clean, executable Python code block in your response, without any extra explanation or markdown formatting. The script should not try to show the plots in a GUI window.",
                },
                {
                    "role": "user",
                    "content": """
Please generate a Python script using 'matplotlib' to create two plots for a GED Science test review. The plots should test a student's ability to interpret scientific data.

**Plot 1: Pie Chart - Composition of Earth's Atmosphere**
- Create a pie chart based on the following data: Nitrogen (78%), Oxygen (21%), Other Gases (1%).
- Title the chart "Composition of Earth's Atmosphere".
- Display the plot
- Save the plot to a file named 'pie_chart.png'.

**Plot 2: Line Graph - Temperature Change with Altitude**
- Create a line graph showing how temperature changes with altitude.
- Use this data:
  - Altitude (m): [0, 1000, 2000, 3000, 4000]
  - Temperature (¬∞C): [15, 8.5, 2, -4.5, -11]
- Label the x-axis 'Altitude (m)' and the y-axis 'Temperature (¬∞C)'.
- Title the graph 'Atmospheric Temperature Gradient'.
- Display the plot
- Save the plot to a file named 'line_graph.png'.

**Important:** Do not call plt.show() in the script. The script must generate and save both files.
"""
                },
            ],
            temperature=0.1,  # Lower temperature for more deterministic code generation
        )

        # Extract the code from the response
        response_content = completion.choices[0].message.content

        # Clean up the response to get just the code
        # This handles cases where the model might still include markdown backticks
        if response_content.strip().startswith("```python"):
            code = response_content.split("```python")[1].split("```")[0].strip()
        else:
            code = response_content.strip()

        print("‚úÖ Code received successfully.")
        return code

    except Exception as e:
        print(f"‚ùå An error occurred while calling the API: {e}")
        return ""


def execute_and_capture_output(code: str):
    """
    Executes a string of Python code in a separate process, captures its output,
    and checks if the output files were created.

    Args:
        code: The Python code to execute as a string.
    """
    if not code:
        print("No code to execute.")
        return

    print("\n--- Executing Generated Code in a Subprocess ---")

    # Define the expected output filenames
    output_filenames = ["pie_chart.png", "line_graph.png"]

    # Clean up previous plot files if they exist
    for filename in output_filenames:
        if os.path.exists(filename):
            os.remove(filename)

    # Create a temporary file to write the code to.
    with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.py') as temp_script:
        temp_script_name = temp_script.name
        temp_script.write(code)

    try:
        # Execute the script using a subprocess.
        result = subprocess.run(
            [sys.executable, temp_script_name],
            capture_output=True,
            text=True,
            check=False  # Do not raise an exception on non-zero exit codes
        )

        print("--- Captured Console Output ---")
        if result.stdout:
            print(result.stdout.strip())

        # Check for execution errors
        if result.stderr:
            error_output = result.stderr.strip()
            print("\n--- Errors ---")
            print(error_output)
            if "ModuleNotFoundError" in error_output:
                missing_module = error_output.split("'")[1]
                print(
                    f"\nüí° HINT: The code requires the '{missing_module}' library. Try installing it with: pip install {missing_module}")

        if not result.stdout and not result.stderr:
            print("(No output was printed to the console by the script.)")

        print("\n--- File Output Check ---")
        all_files_found = True
        for filename in output_filenames:
            if os.path.exists(filename):
                print(f"‚úÖ Success! Plot saved as '{filename}' in the current directory.")
            else:
                all_files_found = False
                print(f"‚ùå Failure: The output file '{filename}' was not found.")

        if not all_files_found and not result.stderr:
            print(f"‚ö†Ô∏è Warning: The script ran without errors, but one or more output files were not created.")

    except Exception as e:
        print(f"‚ùå An unexpected error occurred during subprocess execution: {e}")
    finally:
        # Clean up the temporary file
        os.remove(temp_script_name)

    print("----------------------")


def main():
    """
    Main function to orchestrate getting, executing, and printing code.
    """
    print("--- Gemini Code Executor via OpenRouter ---")

    if not OPENROUTER_API_KEY:
        print("‚ùå Error: The 'OPENROUTER_API_KEY' environment variable is not set.")
        print("Please set the environment variable and run the script again.")
        return

    # Initialize the client, pointing to OpenRouter's API endpoint
    client = OpenAI(
        base_url=OPENROUTER_API_BASE,
        api_key=OPENROUTER_API_KEY,
    )

    # 1. Get the code from the LLM
    generated_code = get_code_from_gemini(client)

    if generated_code:
        print("\n--- Generated Code ---")
        print(generated_code)
        print("----------------------")

        # 2. Execute the code and check for file output
        execute_and_capture_output(generated_code)


if __name__ == "__main__":
    main()
